#ifndef hrs_tuningAC_h
#define hrs_tuningAC_h 1

double s2f1_off(int i,char* ARM,char* MODE, int KINE);
const double c=299792458e-9;// [m/ns]
const double mk=493.7e-3;// Kaon mass [GeV/c^2]
const double me=0.511e-3;// electron mass [GeV/c^2] 
const double ml=1115.7e-3;//Lambda mass [GeV/c^2]
const double mn=939.6e-3; // neutron mass [GeV/c^2]
const double mpi=139.6e-3;// pion mass [GeV/c^2]
#include <iostream>
#include <fstream>
#include <math.h>
#include <string>
#include <time.h>
#include <stdio.h>
#include <unistd.h>
#include <sstream>
using namespace std;
#include "TApplication.h"
#include "TH1F.h"
#include "TH2F.h"
#include "TF1.h"
#include "TFile.h"
#include "TLeaf.h"
#include "TTree.h"
#include "TCut.h"
#include "TChain.h"
#include "TCanvas.h"
#include "TVector3.h"
#include "TGraph.h"
#include "TLine.h"
#include "TLatex.h"
#include "TText.h"
#include "TStyle.h"
#include "TROOT.h"
#include "TGraphErrors.h"
#include "TProfile.h"
#include "TSystem.h"
#include "TColor.h"
#include "TPaveText.h"
#include "TRandom.h"
#include "Setting.h"
#include "Param.h"

////////////////////////////////////
////SET PARAMETERS//////////////////
////////////////////////////////////
int nth=3;//change, nth=0 originally
char* mode="H";
int kine=1;
//double tdc_time=56.23;
double tdc_time=0.05623;//[ps/ch]
bool ac2_min = true;


class tuningAC{

 public:
  tuningAC();
  ~tuningAC();
  void SetRunList(string ifname);
  void SetRun(string ifname);
  void SetRoot(string ifname);//ofname?
  void SetBranch();
  void SetParam();  
  void MakeHist();
  void Fill();
  void Fitting();
  void Tuning(); 
  void Draw();
  void Print(string ofname);
  void Write();
  void Write_coin();  
  void Comment();
  TFile* fnew;
  public:
  Setting* set;


////////////////////////////////////
////Define beforehand///////////////
////////////////////////////////////

  
  //=== SetRunList ====//
  TChain* T;
  int ENum;

//  //=== SetRoot =======//
  TTree* tnew;
  double mm_ac1[100][100];
  double mm_ac2[100][100];
  double fom_ac1[100];
  double fom_ac2[100];
  double mm_c;  
  double ct_c;
  //==== SetBranch ====//


  double RF1[100],LF1[100];
  double Rs0r_ac[100],Rs0l_ac[100],Ls0r_ac[100],Ls0l_ac[100];
  double Rs2r_ac[100],Rs2l_ac[100],Ls2r_ac[100],Ls2l_ac[100];
  double Rs0r_tc[100],Rs0l_tc[100],Ls0r_tc[100],Ls0l_tc[100];
  double Rs2r_tc[100],Rs2l_tc[100],Ls2r_tc[100],Ls2l_tc[100];
  double Ra1t[100],Ra1a[100],Ra1a_p[100],Ra1a_c[100],Ra1sum;
  double Ra2t[100],Ra2a[100],Ra2a_p[100],Ra2a_c[100],Ra2sum;
  double La1t[100],La1a[100],La1a_p[100],La1a_c[100],La1sum;
  double La2t[100],La2a[100],La2a_p[100],La2a_c[100],La2sum;
  double Rp[100],Rpx[100],Rpy[100],Lp[100],Lpx[100],Lpy[100];
  double Rth[100],Rph[100],Rx[100],Rvz[100],Lth[100],Lph[100],Lx[100],Lvz[100];
  double Rbeta[100],Lbeta[100];
  double rs2pathl[100],rs0pathl[100],rtrpathl[100];
  double ls2pathl[100],ls0pathl[100],ltrpathl[100];
  double trigger[100];
  double hallap;
double Rs2tpads[100],Ls2tpads[100];
double Rs2trpad[100],Ls2trpad[100];
  double Ru1_time[100];
  int NRu1_time;
  //---- Gogami root ---------//
  double ctime[100];
  double DRT5;
  //---- Toyama ana_Lambda ----//
  double Rz,Lz,Rpz,Lpz; 
  double tcoin_t;
  //------------------------//
 double mm; 
 double Ee,Ee_,Ek,Epi;
 double pe,pe_,pk,ppi;
 double coin_t,coin_tc;
 double rtof[16];
 double rbeta,rbeta_k,lbeta;
 double Rs2_off,Ls2_off; 
 double Rs2_tcorr,Ls2_tcorr;
 int Ls2pads,Rs2pads;
 bool cut_ac1,cut_ac2,cut_beta;
 int nac1,nac2,nac3,n;
 double tof_r,tof_l; 
 double rpathl,lpathl;
 double corr_R,corr_L;
 double rpath_corr,lpath_corr;
 double ct_acc; 
 double acc;
 double ct;
 int ev;
//
// //===== SetParam ======//
//
//
 double ac1_adc[100],ac2_adc[100];
 double min_coin,max_coin,min_coin_c,max_coin_c;
 double min_ac1,max_ac1,min_ac2,max_ac2,min_adc,max_adc;
 double th1_max,th2_max,th2_min;
 double ac1_kcut,ac2_kcut_min,ac2_kcut_max;
 double th_ac2_t,th_ac2_b; 
//
// 
// //===== Make Hist =======//
 TH1F* hmm;
// TH1F* hmm_acc;
// TH1F* hmm_p;
// TH1F* hRu1_time_c;
// TH1F* hRu1_time_s; 
// TH2F* hcoin_ac1[100];
// TH2F* hcoin_ac2[100];
// TH2F* hcoin_ac1_acc[100];
// TH2F* hcoin_ac2_acc[100];
// TH2F* hvdc1_ac1[100];
// TH2F* hvdc2_ac1[100];
// TH2F* hvdc1_ac2[100];
// TH2F* hvdc2_ac2[100];
// TH2F* hs0_ac1[100];
// TH2F* hs2_ac1[100];
// TH2F* hs0_ac2[100];
// TH2F* hs2_ac2[100];
// TH1F* hcoin_t1[100];
 TH1F* hcoin_t2[100];
 TH1F* hcoin_k_ac1[100];
 TH1F* hcoin_k_ac2[100];
// TH1F* hcoin_ac1_max[100];
// TH1F* hcoin_ac2_max[100];
// TH1F* hcoin_t3[100][100];
// TH1F* hcoin_t;
   TH1F* hcoin_tc;
// TH1F* hcoin_acc_ac1[100];
// TH1F* hcoin_acc_ac2[100];
// TH2F* ha1_a2;
 TH1F* hcoin_k;
 TH1F* hcoin_pi;
 TH1F* hcoin_p;
// TH2F* hcoin_ac1_all;
// TH2F* hcoin_ac2_all;
// TH2F* hmm_ac1[100];
// TH2F* hmm_ac2[100];
// TH2F* hmm_ac1_acc[100];
// TH2F* hmm_ac2_acc[100];
// TH2F* hct_a1a_c[24];
// TH2F* hct_a2a_c[26]; 
// //----- Fill -----// 
// TH1D* hmm_ac1_p[100][100];
// TH1D* hmm_ac2_p[100][100];
// TF1* facc[100][100][2];
// TF1* fpi[100][100][2];
// TF1* fk[100][100][2];
// TF1* fcoin[100][100][2];
// TF1* fp[100][100][2];
// TF1* fbg[100][100][2];
// TF1* fbg_s[100][100][2];
// TF1* fLam[100][100][2];
// TF1* fSig[100][100][2];
// TF1* fLam_p;
// TF1* fSig_p;   
// TH2F* hfom_ac[100][100];
// TH2F* hAC;
// TH2F* hAC2;
// 
 int iter_ac1;
 int iter_ac2;
// int iter_max;
// TH1D* hcoin_ac1_p[100][100];
// TH1D* hcoin_ac2_p[100][100]; 
// TH1D* hcoin_ac1_all_p[100][100];
// TH1D* hcoin_ac2_all_p[100][100]; 
// TH1D* hcoin_ac1_acc_p[100][100];
// TH1D* hcoin_ac2_acc_p[100][100]; 
// TH1D* hmm_ac1_all_p[100][100];
// TH1D* hmm_ac2_all_p[100][100];
// TH1D* hmm_ac1_acc_p[100][100];
// TH1D* hmm_ac2_acc_p[100][100];
//
// TGraphErrors* gsum_pi_ac1[100][100];
// TGraphErrors* gsum_p_ac1[100][100];
// TGraphErrors* gsum_k_ac1[100][100];
// TGraphErrors* grate_k_ac1[100][100];
// TGraphErrors* grate_p_ac1[100][100];
// TGraphErrors* grate_pi_ac1[100][100];
// TGraphErrors* gsum_pi_ac2[100][100];
// TGraphErrors* gsum_p_ac2[100][100];
// TGraphErrors* gsum_k_ac2[100][100];
// TGraphErrors* grate_k_ac2[100][100];
// TGraphErrors* grate_pi_ac2[100][100];
// TGraphErrors* grate_p_ac2[100][100];
// TGraphErrors* gSN_k_ac1[100][100];
// TGraphErrors* gSN_k_ac2[100][100];
// TGraphErrors* gfom_ac1[100];
// TGraphErrors* gfom_ac2[100];
// TGraphErrors* gfom;
// TGraphErrors* gmm_SN_ac1[100];
// TGraphErrors* gmm_SN_ac2[100];
// TGraphErrors* gmm_S_ac1[100];
// TGraphErrors* gmm_S_ac2[100];
// TGraphErrors* gmm_ac2[100]; 
// TGraphErrors* gmm_ac1[100]; 
// TGraphErrors* gL_ac1[100];
// TGraphErrors* gL_ac2[100];  
// TGraphErrors* gS_ac1[100];
// TGraphErrors* gS_ac2[100];  
// TGraphErrors* gL_eff_ac1[100];
// TGraphErrors* gL_eff_ac2[100];  
// TGraphErrors* gS_eff_ac1[100];
// TGraphErrors* gS_eff_ac2[100];  
// TGraphErrors* gS_SN_ac1[100];
// TGraphErrors* gS_SN_ac2[100];  
// TGraphErrors* gL_SN_ac1[100];
// TGraphErrors* gL_SN_ac2[100];  
// TGraphErrors* gL_N_ac1[100];
// TGraphErrors* gL_N_ac2[100];
// TGraphErrors* gL_FOM_ac1[100];    
// TGraphErrors* gL_FOM_ac2[100];  
//
//
// TF1* facc_t1def[100][100];
// TF1* fpi_t1def[100][100];
// TF1* fk_t1def[100][100];
// TF1* fcoin_t1def[100][100];
// TF1* fp_t1def[100][100];
// TF1* facc_t2def[100][100];
// TF1* fpi_t2def[100][100];
// TF1* fk_t2def[100][100];
// TF1* fcoin_t2def[100][100];
// TF1* fp_t2def[100][100];
// TF1* facc_t3def[100][100];
// TF1* fpi_t3def[100][100];
// TF1* fk_t3def[100][100];
// TF1* fcoin_t3def[100][100];
// TF1* fp_t3def[100][100];
// TF1* fcoin_t1[100][100];
// TF1* fcoin_t2[100][100];  
// TF1* fcoin_t3[100][100]; 
 TF1* facc_kc;
 TF1* fk_kc;
 TF1* fpi_pic;
 TF1* fp_pc;
 TF1* fac[100];
 TF1* fkk[100];
//
// //----- Tuning hist ----//
// TH1F* hcoin_fom;
// TH1F* hcoin_acc;
// TH1F* hmm_fom;
// TH1F* hmm_fom_acc;
// TH1F* hmm_fom_p;
// TF1* fbg_L;
// TF1* fbg_S; 
// TF1*fL_p;    
// TF1* fS_p;  
// TF1* fL_all;
// TF1* fS_all;  
// TF1* fS_fom;
// TF1* fL_fom;
// TF1* fL_fom_bg;
// TF1* fS_fom_bg;
// TF1* fL_fom_p;
// TF1* fS_fom_p;
// TH1F* hcoin_fom_p;
// TF1* fk_fom; 
 //----- paremters ----//
 double bin_vdc,min_vdc,max_vdc;
 double min_s0,max_s0;
 int bin_s0;
 double min_s2,max_s2;
 int bin_s2;
 double bin_coin;
 double bin_coin_c;
 int bin_beta; 
 int bin_adc;
 int bin_ac1;
 int bin_ac2;
 double min_mm,max_mm,bin_mm;
//
// //===== Fill ========//
// 
// //--- Coin Offset -----//
 double pathl_off,s2_offset,coin_offset;
// //----- Cut Parameters ----------//
 double coin_cutmin=-248;
 double coin_cutmax=-244; 
 double rpathl_cutmin=28.7;
 double rpathl_cutmax=29.4;
 double lpathl_cutmin=28.6;
 double lpathl_cutmax=29.2;
 double rbeta_cutmin=0.0;
 double rbeta_cutmax=1.0;
 double lbeta_cutmin=0.9;
 double lbeta_cutmax=1.0;
 double Rvz_cutmin=-0.1;
 double Rvz_cutmax= 0.1;
 double Lvz_cutmin=-0.1;
 double Lvz_cutmax= 0.1;
 double Rx_cutmin= -0.4;
 double Rx_cutmax= 0.4;
// //-------------------------------//
 bool cut_Rs2,cut_Ls2,cut_rpathl,cut_lpathl,cut_coin,cut_rbeta,cut_lbeta,cut_vz,cut_Rx,cut_trig,coin_trig,right_trig,cut_track,cut_s0;
//
//
// //===== Fitting =========//
//
//
// //--- Parameters -----//
//  double bg_min,bg_max;
//  double bgs_min,bgs_max;
//  double Lfom[100][100][2],Sfom[100][100][2];
//  double L0_err[100][100][2],L1_err[100][100][2],L2_err[100][100][2];
//  double S0_err[100][100][2],S1_err[100][100][2],S2_err[100][100][2];
//  double nL_err[100][100][2],nS_err[100][100][2];
//  double bgL_ac1[100][100], bgL_ac2[100][100],bgS_ac1[100][100], bgS_ac2[100][100];
//  double totL_ac1[100][100], totL_ac2[100][100],totS_ac1[100][100], totS_ac2[100][100];
//  double nL[100][100][2],sigL[100][100][2],meanL[100][100][2];
// double nS[100][100][2],sigS[100][100][2],meanS[100][100][2];
// double kmin[100][100][2],kmax[100][100][2];
// double inte_ktot[100][100][2], inte_ksig[100][100][2];
// double p0_acc[100][100][2], p1_acc[100][100][2];
// double n_p[100][100][2],sig_p[100][100][2],mean_p[100][100][2];
// double n_pi[100][100][2],sig_pi[100][100][2],mean_pi[100][100][2];
// double n_k[100][100][2],sig_k[100][100][2],mean_k[100][100][2];
// int bin_ac1_adc[100][100],bin_min_ac1,bin_max_ac1,bin_ac2_adc[100][100],bin_max_ac2,bin_min_ac2;
// double sum_k[100][100][2],sum_p[100][100][2],sum_pi[100][100][2]; 
// double sum_k_err[100][100][2],sum_p_err[100][100][2],sum_pi_err[100][100][2]; 
// double inte_acc[100][100][2];
// double th_ac1[100],th_ac2[100];
// int bin_th_ac1[100][100],bin_th_ac2[100][100]; 
// double nk[100][100][100][100][2],npi[100][100][100][100][2],np[100][100][100][100][2];
// double max_nk[100][100][2],max_npi[100][100][2],max_np[100][100][2];
// double n_p_err[100][100][2],n_pi_err[100][100][2],n_k_err[100][100][2];
// double FOM_ac1[100][100],FOM_ac2[100][100];
// double max_fom_ac1,max_fom_ac2;
// int fom_th1,fom_th2;
// double nLam_ac1,nLam_ac2,SNLam_ac1,SNLam_ac2;
// int fom_max_th2,fom_max_th1;
// double FOM_max_ac1[100],FOM_max_ac2[100],FOM_th1[100],FOM_th2[100]; 
// 
 double def_sig_p,def_mean_p,def_sig_pi,def_mean_pi,def_sig_k,def_mean_k,def_acc;
 double def_num_k,def_num_p,def_num_pi,def_acc_k,def_acc_pi,def_acc_p;
 double signal[100], noise[100];
//
// double def_t1_k[100][100],def_t1_pi[100][100],def_t1_p[100][100],def_t1_acc[100][100];
// double def_t1_k_err[100][100],def_t1_pi_err[100][100],def_t1_p_err[100][100],def_t1_acc_err[100][100];
// double t1sig_k[100][100],t1sig_p[100][100],t1sig_pi[100][100],t1mean_p[100][100],t1mean_k[100][100],t1mean_pi[100][100];
// double t1sum_k[100],t1sum_pi[100],t1sum_p[100];
// double t1sum_k_err[100],t1sum_pi_err[100],t1sum_p_err[100];
// double def_t2_k[100][100],def_t2_pi[100][100],def_t2_p[100][100],def_t2_acc[100][100];
// double t2sig_k[100][100],t2sig_p[100][100],t2sig_pi[100][100],t2mean_p[100][100],t2mean_k[100][100],t2mean_pi[100][100];
// double def_t2_k_err[100][100],def_t2_pi_err[100][100],def_t2_p_err[100][100],def_t2_acc_err[100][100];
// double t2sum_k[100],t2sum_pi[100],t2sum_p[100];
// double t2sum_k_err[100],t2sum_pi_err[100],t2sum_p_err[100];
// double def_t3_k[100][100],def_t3_pi[100][100],def_t3_p[100][100],def_t3_acc[100][100];
// double t3sig_k[100][100],t3sig_p[100][100],t3sig_pi[100][100],t3mean_p[100][100],t3mean_k[100][100],t3mean_pi[100][100];
// double t3sum_k[100][100],t3sum_pi[100][100],t3sum_p[100][100];
// double emp[100];
//
// double rate_k[100][100][2],rate_p[100][100][2],rate_pi[100][100][2];
// double rate_k_err[100][100][2],rate_p_err[100][100][2],rate_pi_err[100][100][2];
// double sum_acc[100][100][2];
// double max_SN_ac1[100],max_SN_ac2[100];
// int SN_ac1[100],SN_ac2[100];
// double bg_0[100][100][2],bg_1[100][100][2],bg_2[100][100][2];
// double bg_s0[100][100][2],bg_s1[100][100][2],bg_s2[100][100][2];
// double L0[100][100][2],L1[100][100][2],L2[100][100][2];
// double S0[100][100][2],S1[100][100][2],S2[100][100][2];
// double sum_k_max=1250.;
// double fom_max=0.0;
// 
//
//
// //====== Tuning ============//
// bool ac2_up,ac2_down,ac2_flag; 
// double Lbg_fom[3],Sbg_fom[3];
// double Lam_p[3],Sig_p[3];
// double NL_err,NS_err;
// double Lam_p_err[3],Sig_p_err[3];
//
//  double pbg[3];  
//  double pbg_S[3];
//  double pL[3],pL_err[3];
//  double pS[3],pS_err[3];
//  double sum_L,sum_S;
//
// double all_L;
// double all_S;
// double bg_L;
// double bg_S;
// double sumk_fom;
// double meank_fom;
// double sigk_fom;
// double sk_fom;
// double sk_fom_ct;
// double nk_fom;
// double snk_fom;
// double fom;
//
// //====== Draw ===========//
 TCanvas* c1;
// TCanvas* c9;
// TCanvas* c10;
// TCanvas* c11;
// TCanvas* c12;
// TCanvas* c13; 
// TCanvas* c14;
// TCanvas* c15;
// TCanvas* c16;
// TCanvas* c17;
// TCanvas* c18;
// TCanvas* c19;
// TCanvas* c20;
// TCanvas* c21;
// TCanvas* c22;
// TCanvas* c23;
// TCanvas* c24;
// TCanvas* c25; 
// TCanvas* c30;
// TCanvas* c31;
// TCanvas* c32;
// TCanvas* c33;
// TCanvas* c34;
//
//
//   
// 
};
////////////////////////////////////////////////////////Copy from ana_Lambda
void tuningAC::SetRoot(string ifname){
  add_tree(ifname);
  pack_tree();
  readtreeHRSR();
  readtreeHRSL();

}
/////////////////////////////
void tuningAC::SetRunList(string ifname){

  ifstream ifp(Form("%s",ifname.c_str()),ios::in);
  if(!ifp){ cout<<"no input file "<<ifname<<endl; exit(1); }
  string buf, runname;
  while(1){
    getline(ifp,buf);
    if( buf[0]=='#' ){ continue; }
    if( ifp.eof() ) break;
    istringstream sbuf(buf);
    sbuf >> runname;
    add_tree(runname);
    //    cout<<buf<<endl;
  }

  pack_tree();
  readtreeHRSR();
  readtreeHRSL();
}
////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
//void tuningAC::SetRunList(string ifname){
//  cout<<"Set Run List "<<endl;
//  
//  T=new TChain("T");
//
//  ifstream ifp(Form("%s",ifname.c_str()),ios::in);
//  if(!ifp){ cout<<"no input file "<<ifname<<endl; exit(1); }
//  string buf, runname;
//  while(1){
//    getline(ifp,buf);
//    if( buf[0]=='#' ){ continue; }
//    if( ifp.eof() ) break;
//    istringstream sbuf(buf);
//    sbuf >> runname;
//    T->Add(runname.c_str());
//  }
//  ENum=tree->GetEntries();
////  ENum=T->GetEntries();
//  cout<<"Events: "<<ENum<<endl; 
//}
//
//
//
//
//void tuningAC::SetRoot(string ofname){
//
//
//  fnew = new TFile(Form("%s",ofname.c_str()),"recreate");
//  tnew =new TTree("T",ofname.c_str());
//  tnew = T->CloneTree(0);
//    
////  tnew->Branch("mm_c",&mm_c,"mm_c/D");
////  tnew->Branch("ct_c",&ct_c,"ct_c/D");  
//  /*
//
//  tnew->Branch("mm_ac1",mm_ac1,"mm_ac1[100][100]/D");
//  tnew->Branch("mm_ac2",mm_ac2,"mm_ac2[100][100]/D");
//  tnew->Branch("fom_ac1",fom_ac1,"fom_ac1[100]/D");
//  tnew->Branch("fom_ac2",fom_ac2,"fom_ac2[100]/D");  
//  tnew->Branch("th_ac1",th_ac1,"th_ac1[100]/D");
//  tnew->Branch("th_ac2",th_ac2,"th_ac2[100]/D");  
//  */
//
//  
//}

////////////////////////////////////////////////////////////////////////////
void tuningAC::SetBranch(){

	T->SetBranchStatus("*",0);

//------ Right Arm -------------//

 T->SetBranchStatus("RTDC.F1FirstHit",1);
 T->SetBranchAddress("RTDC.F1FirstHit",RF1); 
 T->SetBranchStatus("R.s2.t_pads",1);
 T->SetBranchAddress("R.s2.t_pads",Rs2tpads);
 T->SetBranchStatus("R.s2.trpad",1);
 T->SetBranchAddress("R.s2.trpad",Rs2trpad);
 T->SetBranchStatus("R.a1.a_c",1);
 T->SetBranchAddress("R.a1.a_c",Ra1a_c);
 T->SetBranchStatus("R.a2.a_c",1);
 T->SetBranchAddress("R.a2.a_c",Ra2a_c); 
// T->SetBranchStatus("R.a1.asum_c",1);
// T->SetBranchAddress("R.a1.asum_c",&Ra1sum);
// T->SetBranchStatus("R.a2.asum_c",1);
// T->SetBranchAddress("R.a2.asum_c",&Ra2sum);
 T->SetBranchStatus("R.a1.asum_p",1);
 T->SetBranchAddress("R.a1.asum_p",&Ra1sum);
 T->SetBranchStatus("R.a2.asum_p",1);
 T->SetBranchAddress("R.a2.asum_p",&Ra2sum);
//change 
 T->SetBranchStatus("R.vdc.u1.time",1);
 T->SetBranchAddress("R.vdc.u1.time",Ru1_time);
 T->SetBranchStatus("Ndata.R.vdc.u1.time",1);
 T->SetBranchAddress("Ndata.R.vdc.u1.time",&NRu1_time);
 // path length//
 T->SetBranchStatus("R.s2.trpath",1); 
 T->SetBranchAddress("R.s2.trpath",rs2pathl); 
 T->SetBranchStatus("R.tr.pathl",1);  
 T->SetBranchAddress("R.tr.pathl",rtrpathl);
 // Target positon information //
 T->SetBranchStatus("R.tr.p",1);
 T->SetBranchAddress("R.tr.p",Rp);
 T->SetBranchStatus("R.tr.vz",1);    
 T->SetBranchAddress("R.tr.vz",Rvz); 

 //------ Left Arm a---------------//
 T->SetBranchStatus("LTDC.F1FirstHit",1);
 T->SetBranchAddress("LTDC.F1FirstHit",LF1); 
 T->SetBranchStatus("L.s2.t_pads",1);
 T->SetBranchAddress("L.s2.t_pads",Ls2tpads);
 T->SetBranchStatus("L.s2.trpad",1);
 T->SetBranchAddress("L.s2.trpad",Ls2trpad);
  // path length//
 T->SetBranchStatus("L.s2.trpath",1); 
 T->SetBranchAddress("L.s2.trpath",ls2pathl); 
 T->SetBranchStatus("L.tr.pathl",1);   
 T->SetBranchAddress("L.tr.pathl",ltrpathl);
 T->SetBranchStatus("L.tr.p",1);
 T->SetBranchAddress("L.tr.p",Lp);  
 T->SetBranchStatus("L.tr.vz",1);    
 T->SetBranchAddress("L.tr.vz",Lvz);
}


void tuningAC::SetParam(){

   min_coin=-10;
   max_coin=20.0;
   min_coin_c=-10;
   max_coin_c=20.0;
//change
//   min_coin_c=-100;
//   max_coin_c=1000.0;
 min_ac1=0.0;
 max_ac1=5000.;
 min_ac2=0.0;
 max_ac2=20000.;
 min_adc=-500.0;
 max_adc=20000.;

	//=== AC Threshold variable ===//
	 th1_max=2000.;
	 ac1_adc[0]=400;
	 ac1_adc[1]=400.;
	 ac1_adc[2]=400.;
 th2_max=6000.;
 ac2_adc[0]=900;
 ac2_adc[1]=700.;
 ac2_adc[2]=600.;
	//---Kaon Cut ----//
 	ac1_kcut=100.;
 	ac2_kcut_min=1000.;
 	ac2_kcut_max=5000.;


}
////////////////////////////////////////////////////////////

void tuningAC::MakeHist(){
// min_vdc=-0.2e-6;
// max_vdc= 1.2e-6;
// bin_vdc=(max_vdc-min_vdc)/tdc_time*1.0e6;
// bin_vdc=(int)bin_vdc;
// min_s0=-10;
// max_s0=10000;
// bin_s0=int(max_s0-min_s0);
//
//
 min_s2=-10;
 max_s2=5000;
 bin_s2=max_s2-min_s2;
        bin_coin=(int)(max_coin-min_coin)/tdc_time;
        bin_coin_c=(int)(max_coin_c-min_coin_c)/tdc_time;
        bin_coin_c=(int)(max_coin_c-min_coin_c)/tdc_time;
        bin_coin_c=(int)750;
//////////////////////////////////////////////////////////////should be changed
//        bin_beta=6000;
//	bin_adc=(int)max_adc-min_adc;
//	bin_ac1=(int)(max_ac1-min_ac1)*3; 
//	bin_ac2=(int)(max_ac2-min_ac2)*3; 
  min_mm=0.5;
  max_mm=1.5;
  bin_mm=(max_mm-min_mm)/0.002; //Counts/2 MeV
  bin_mm=(int)bin_mm;
	iter_ac1=30;//iteration number

 hcoin_tc=new TH1F("hcoin_tc","Coincidence time w/ Path Length Correction  S2R-S2L[ns] ",bin_coin_c,min_coin_c,max_coin_c);
for (int i=0;i<nth;i++){
 hcoin_t2[i]=new TH1F(Form("hcoin_t2[%d]",i), Form("Coincidence %lf<AC2<%lf  cut",ac1_adc[i],th2_max),bin_coin_c,min_coin_c,max_coin_c);
   set->SetTH1(hcoin_t2[i],"Coincidence time ","","");
 hcoin_k_ac1[i]=new TH1F(Form("hcoin_k_ac1[%d]",i), Form("Cointime (Kaon) AC1<%lf  cut",ac1_adc[i]),bin_coin_c,min_coin_c,max_coin_c);
   set->SetTH1(hcoin_k_ac1[i],Form("Cointime (Kaon) AC1<%lf  cut",ac1_adc[i]),"","");
 hcoin_k_ac2[i]=new TH1F(Form("hcoin_k_ac2[%d]",i), Form("Cointime (Kaon) 1000<AC2<%lf  cut",ac2_adc[i]),bin_coin_c,min_coin_c,max_coin_c);
   set->SetTH1(hcoin_k_ac2[i],Form("Cointime (Kaon) %lf<AC2<4000  cut",ac2_adc[i]),"","");
 }
 hmm=new TH1F("hmm","hcoin",bin_mm,min_mm,max_mm);
 set->SetTH1(hmm,"Mass w/o AC tuning","Mass [GeV]","Counts/2 MeV"); 
      hmm->GetXaxis()->SetRangeUser(1.0,1.3);
      hmm->GetYaxis()->SetRangeUser(0.0,450.0);

 hcoin_k=new TH1F("hcoin_k","Coincidence time w/ Correction Kaon Cut  S2R-S2L[ns] ",bin_coin_c,min_coin_c,max_coin_c);
 hcoin_pi=new TH1F("hcoin_pi","Coincidence time w/ Correction Pion  Cut S2R-S2L[ns] ",bin_coin_c,min_coin_c,max_coin_c);
 hcoin_p=new TH1F("hcoin_p","Coincidence time w/ Correction Proton  Cut S2R-S2L[ns] ",bin_coin_c,min_coin_c,max_coin_c);
 





 facc_kc=new TF1("facc_kc","[0]",min_coin_c,max_coin_c);
 facc_kc->SetNpx(2000);
 fk_kc=new TF1("fk_kc","gausn(0)+pol0(3)",min_coin_c,max_coin_c);
 fk_kc->SetNpx(2000);
 fpi_pic=new TF1("fpi_pic","gausn(0)+pol0(3)",min_coin_c,max_coin_c);
 fpi_pic->SetNpx(2000);
 fp_pc=new TF1("fp_pc","gausn(0)+pol0(3)",min_coin_c,max_coin_c);
 fp_pc->SetNpx(2000);
 for(int i=0;i<nth;i++){
 fac[i]=new TF1(Form("fac[%d]",i),"[0]",min_coin_c,max_coin_c);
 fac[i]->SetNpx(2000);
 fkk[i]=new TF1(Form("fkk[%d]",i),"gausn(0)+pol0(3)",min_coin_c,max_coin_c);
 fkk[i]->SetNpx(2000);
}
}
////////////////////////////////////////////////////////////

void tuningAC::Fill(){

//////////////////////////////
/////mode = H, kine = 1 ////// in hrs_tuningAC.h
//////////////////////////////
 pathl_off=0.0;
 pathl_off=-498.+30.-3.0+0.5;
 s2_offset=-500.0+25.;
 coin_offset=-41.35+498.;

	int ev = 0;
	for(int k=0;k<ENum;k++){
		//T->GetEntry(k);
		tree->GetEntry(k);

	if(k==ev*100000){
cout << "Event (Fill) : " << k << "/" << ENum << endl;
	ev += 1;
	}
	pe_		  = Lp[0];//*sqrt(1+pow(Lth[0],2)+pow(Lph[0],2));
	pk		  = Rp[0];//*sqrt(1+pow(Rth[0],2)+pow(Rph[0],2));
	ppi		  = Rp[0];//*sqrt(1+pow(Rth[0],2)+pow(Rph[0],2));
	pe		  = 4.313; // GeV   //hallap*1.0e-3;
	Ee		  = sqrt(pe*pe + me*me);
	Ee_		  = sqrt(pe*pe + me*me);
	Epi		  = sqrt(ppi*ppi + mpi*mpi);
	Ek		  = sqrt(pk*pk + mk*mk);
	Ls2pads   = (int)Ls2tpads[0];
	Rs2pads   = (int)Rs2tpads[0];
	rpathl    = rtrpathl[0]+rs2pathl[0]; // R-HRS path length S2 -RF
	lpathl    = ltrpathl[0]+ls2pathl[0]; // L-HRS path length S2 -RF
	rbeta     = pk/Ek; 
	rpath_corr=rpathl/rbeta/c;
	lbeta     =1.0;//pe_/Ee_; 
	lpath_corr=lpathl/lbeta/c;
 
///Cointime///
////////////////////from ana_Lambda.cc line 978 
  bool L_Tr = false; // LHRS Tracking Chi2 cut
  bool L_FP = false; // LHRS FP plane cut
  bool R_Tr = false; // RHRS Tracking Chi2 cut
  bool R_FP = false; // RHRS FP plane cut
  bool Kaon = false; // Kaon cut
  bool zcut = false; // z-vertex cut
//////////////
//// LHRS ////
//////////////
    
      int NLtr = (int)L_tr_n;  if(NLtr>MAX) NLtr = MAX;
//      h_L_trig->Fill( L_evtype);
//      tr.ntrack_l=NLtr;
#ifdef F1TDC
      convertF1TDCL(param);
        L_s0_t = LS0_F1time[0];
      for(int i=0;i<16;i++){
        if(LS2_F1time[i]>-9999.)L_s2_t[i] =  LS2_F1time[i];
        else L_s2_t[i] = -99.;
      }
#endif

      h_L_tr_n->Fill( L_tr_n );
      for(int t=0;t<NLtr;t++){	
        L_Tr = L_FP = false;
        // Cuts
        if( L_tr_chi2[t]<0.01 ) L_Tr = true;
        if( L_tr_th[t]<0.17*L_tr_x[t]+0.025
         && L_tr_th[t]>0.17*L_tr_x[t]-0.035
         && L_tr_th[t]<0.4 *L_tr_x[t]+0.13 ) L_FP = true;
	

    tr.LXFP=L_tr_x[0];
    tr.LXpFP=L_tr_th[0];
    tr.LYFP=L_tr_y[0];
    tr.LYpFP=L_tr_ph[0];
    tr.LXt=L_tr_vx[0];
    tr.LYt=L_tr_vy[0];
    tr.LXpt=L_tr_tg_th[0];
    tr.LYpt=L_tr_tg_ph[0];

	int s2pad = (int)L_s2_trpad[t];
	tr.Ls2ra_p[s2pad]=L_s2_ra_p[s2pad];
	tr.Ls2la_p[s2pad]=L_s2_la_p[s2pad];
	tr.Ls2_pad[t]=(int)L_s2_trpad[t];
        double p    = L_tr_p[t];
        double path = L_s2_trpath[t] - L_s0_trpath[t];
        double beta = -99, m2 = -99;
        if( L_s2_t[s2pad]>0 && L_s0_t>0 && s2pad>=0 ){
          beta = path / ( L_s2_t[s2pad] - L_s0_t ) / c;
          m2 = ( 1./beta/beta - 1. ) * p * p;
        }
//        double betae = p / sqrt(Me*Me + p*p);

        h_L_tr_ch2   ->Fill( L_tr_chi2[t] );
      
        if( L_Tr && L_FP && s2pad>=0 ){
        } // if L_Tr && L_FP
      } // for NLtr

//////////////
//// RHRS ////
//////////////

    if(RHRS){
      int NRtr = (int)R_tr_n;  if(NRtr>MAX) NRtr = MAX;
//      h_R_trig->Fill( R_evtype);
      tr.ntrack_r=NRtr;
#ifdef F1TDC
      convertF1TDCR(param);
      R_s0_t = RS0_F1time[0];
      for(int i=0;i<16;i++){
        if(RS2_F1time[i]>-9999.)R_s2_t[i] =  RS2_F1time[i];
        else R_s2_t[i] = -99.;
      }
#endif


      h_R_tr_n->Fill( R_tr_n );
      for(int t=0;t<NRtr;t++){
        R_Tr = R_FP = false;
        // Cuts
        if( R_tr_chi2[t]<0.01 ) R_Tr = true;
        if( R_tr_th[t]<0.17*R_tr_x[t]+0.025
         && R_tr_th[t]>0.17*R_tr_x[t]-0.035
         && R_tr_th[t]<0.4 *R_tr_x[t]+0.13 ) R_FP = true;
	
        int s2pad = (int)R_s2_trpad[t];
	if(s2pad<0)break;
        tr.Rs2_pad[t] =(int)R_s2_trpad[t];
	    double p    = R_tr_p[t];
        double path = R_s2_trpath[t] - R_s0_trpath[t];
        double beta = 0, m2 = 0;


	
    tr.Rs2ra_p[s2pad]=R_s2_ra_p[s2pad];
    tr.Rs2la_p[s2pad]=R_s2_la_p[s2pad];
    tr.Rs0ra_p=R_s0_ra_p[0];
    tr.Rs0la_p=R_s0_la_p[0];
    tr.RXFP=R_tr_x[0];
    tr.RXpFP=R_tr_th[0];
    tr.RYFP=R_tr_y[0];
    tr.RYpFP=R_tr_ph[0];
    tr.RXt=R_tr_vx[0];
    tr.RYt=R_tr_vy[0];
    tr.RXpt=R_tr_tg_th[0];
    tr.RYpt=R_tr_tg_ph[0];
        if( R_s2_t[s2pad]>0 && R_s0_t>0 && s2pad>=0 ){
          beta = path / ( R_s2_t[s2pad] - R_s0_t ) / c;
          m2 = ( 1./beta/beta - 1. ) * p * p;
        } 
//        double betaK = p / sqrt(MK*MK + p*p);
	
        if( R_Tr && R_FP && s2pad>=0 ){
        } // if R_Tr && R_FP
      } // for NRtr
    } // if RHRS

/////////////////////
//// Coincidence ////
/////////////////////
//
//
//	   
//
//
//    if(LHRS && RHRS && R_evtype==5){
//      int NLtr = (int)L_tr_n;  if(NLtr>MAX) NLtr = MAX;
//      int NRtr = (int)R_tr_n;  if(NRtr>MAX) NRtr = MAX;
//      
//      for(int lt=0;lt<NLtr;lt++){
//        L_Tr = L_FP = false;
//        if( L_tr_chi2[lt]<0.01 ) L_Tr = true;
//        if( L_tr_th[lt]<0.17*L_tr_x[lt]+0.025
//         && L_tr_th[lt]>0.17*L_tr_x[lt]-0.035
//         && L_tr_th[lt]<0.40*L_tr_x[lt]+0.130 ) L_FP = true;
//	
//        for(int rt=0;rt<NRtr;rt++){
//          R_Tr = R_FP = false;
//	  Kaon = false;
//	  zcut = false; // z-vertex cut
//	  
//  
//	    //---- Initialization ----//
//	    tr.Lp[lt] =-100.;
//	    tr.Lp[rt] =-100.;
//	    tr.Bp     =-100.;
//	    tr.dpe     = -100.;
//	    tr.dpk[rt] = -100.;
//	    tr.dpe_[lt]= -100.;
//	    
//	    tr.Lp[lt] = L_p;
//	    tr.Rp[rt] = R_p;
//	    tr.Bp     = B_p;
//	    tr.ct_c=-1000.;
//	    tr.ct_g=-1000.;
//	    tr.pid_cut = 0;
//	    tr.ct_cut  = 0;
//	    tr.z_cut   = 0;
//	    tr.Lp_c[lt] = -100.;
//	    tr.Rp_c[rt] = -100.;
//	    tr.Bp_c     = -100.;
//	    tr.missing_mass=-100000.;
//	    tr.coin_time=-1000000.;
//	    tr.missing_mass_acc =-100000.;
//	    tr.missing_mass_L   =-100000.;
//	    tr.missing_mass_nnL =-100000.;
//	    tr.missing_mass_H3L =-100000.;
//	    tr.missing_mass_cut =-100000.;
//	    tr.missing_mass_Al  =-100000.;
//	    tr.missing_mass_Lb  =-100000.;
//	    tr.missing_mass_nnLb=-100000.;
//	    tr.missing_mass_b   =-100000.;
//	    tr.missing_mass_Al=-100000.;
//	    tr.missing_mass_MgL=-100000.;
//	    tr.missing_mass_MgL_acc =-100000.;
//	    tr.missing_mass_Al_bg=-100000.;
//	    tr.Rpathl=-100.; tr.Lpathl=-100.;
//	    tr.Rpathl_c=-100.; tr.Lpathl_c=-100.;
//	    ct=-1000.0;
//
//	    tr.AC1_npe_sum=0.0;
//	    tr.AC2_npe_sum=0.0;
//	    for(int seg=0;seg<24;seg++)
//	      tr.AC1_npe[seg]=0.0;
//	    for(int seg=0;seg<26;seg++)
//	      tr.AC2_npe[seg]=0.0;	  
//
//	    
//	  //==== AC ADC convert ch to npe =======//
//	  //	  tr.AC1_npe_sum=R_a1_asum_p/400.;
//	  //	  tr.AC2_npe_sum=R_a2_asum_p/400.;
//
//	  for(int seg=0;seg<24;seg++){
//	    tr.AC1_npe[seg]=AC_npe(1,seg,R_a1_a_p[seg]);
//	    tr.AC1_npe_sum+=tr.AC1_npe[seg];
//	  }
//	  for(int seg=0;seg<26;seg++){
//	    tr.AC2_npe[seg]=AC_npe(2,seg,R_a2_a_p[seg]);
//	    tr.AC2_npe_sum+=tr.AC2_npe[seg];
//	  }    
//
//
//
//
//          //Kaon = true; // Without AC CUT
//          if( R_tr_chi2[rt]<0.01 ) R_Tr = true;
//          if( R_tr_th[rt]<0.17*R_tr_x[rt]+0.025
//           && R_tr_th[rt]>0.17*R_tr_x[rt]-0.035
//           && R_tr_th[rt]<0.40*R_tr_x[rt]+0.130 ) R_FP = true;
//	  	  if( R_a1_asum_p<200 && R_a2_asum_p>1000 && R_a2_asum_p<4000) Kaon = true;
//	  // if( R_a1_asum_p<a1_th && R_a2_asum_p>a2_th) Kaon = true;
//	  //	  if( R_a1_asum_p<1.0 && R_a2_asum_p>3.0 && R_a2_asum_p<7.0) Kaon = true;	  
////	  if( tr.AC1_npe_sum < a1_th && tr.AC2_npe_sum > a2_th_min) Kaon = true;
//	  //	  if(fabs(R_tr_vz[rt])<0.1
//	  //         && fabs(L_tr_vz[lt])<0.1 && fabs(R_tr_vz[rt] - L_tr_vz[lt])<0.03)zcut=true;
//
//
//
//
//	    
//	  if(fabs(R_tr_vz[rt]-L_tr_vz[lt])<0.025 && fabs(R_tr_vz[rt] + L_tr_vz[lt])/2.0<0.1)zcut=true;
//
//	  
//
//
//	  if( L_Tr && L_FP && R_Tr && R_FP ){
//
//
//
//	    B_p     = HALLA_p/1000.0;// [GeV/c]	    
//	    L_p     = L_tr_p[lt];
//	    R_p     = R_tr_p[rt];
//	    
//	    //==== Energy Loss calibration ======//
//
//	    double B_pc,R_pc,L_pc;
//
//	    tr.dpe     = Eloss(0.0,R_tr_vz[0],"B");
//	    tr.dpk[rt] = Eloss(R_tr_tg_ph[rt],R_tr_vz[rt],"R");
//	    tr.dpe_[lt]= Eloss(L_tr_tg_ph[lt],L_tr_vz[lt],"L");
//	    
//	    R_pc = R_p + tr.dpk[rt];
//	    L_pc = L_p + tr.dpe_[lt];
//	    B_pc = B_p - tr.dpe;
//
//	    //===================================//	    
//	    double B_E     = sqrt( Me*Me + B_p*B_p );
//            int L_s2pad = (int)L_s2_trpad[lt];
//            double L_E     = sqrt( Me*Me + L_p*L_p );
//            double L_betae = L_p / sqrt(Me*Me + L_p*L_p);
//            int R_s2pad    = (int)R_s2_trpad[rt];
//            double R_E     = sqrt( MK*MK + R_p*R_p );
//	    double R_Epi   = sqrt( Mpi*Mpi + R_p*R_p );
//            double R_betaK = R_p / sqrt(MK*MK + R_p*R_p);
//	    double R_betaPi =R_p/ sqrt(Mpi*Mpi + R_p*R_p);
//
//
//	    CoinCalc(R_s2pad,L_s2pad,rt,lt);
//	    //	     double test =CoinCalc_c(R_s2pad,L_s2pad,rt,lt);
//
//	     //	     cout<<"ct "<<ct<<" ct_c "<<test<<endl;
//	    //	    double ct =CoinCalc(R_s2pad,L_s2pad,rt,lt);
//
//
//
//	    
//	    //================= ===================== ======================================//
//            double L_tgt = L_s2_t[L_s2pad] - (L_tr_pathl[lt] + L_s2_trpath[lt])/c;
//            double R_tgt = R_s2_t[R_s2pad] - (R_tr_pathl[rt] + R_s2_trpath[rt])/R_betaK/c;
//	   
//	    //            double R_tgt_pi = R_s2_t[R_s2pad] - (R_tr_pathl[rt] + R_s2_trpath[rt])/R_betaPi/c;
//	    //	    double ct = L_tgt - R_tgt;
//	    //ct = L_tgt - R_tgt -1.6; // nnL_small4 
//	    //================= ===================== ======================================//
//
//
//	    if(Kaon)tr.pid_cut=1;
//	    if(fabs(ct)<1.0)tr.ct_cut=1;
//	    if(zcut)tr.z_cut=1;
//
//            h_ct   ->Fill( ct );
//	    h_Rs2  ->Fill(R_tgt);
//	    h_Ls2  ->Fill(L_tgt);
//	    
//            if( Kaon ) h_ct_wK->Fill( ct );
//            h_Ls2x_ct ->Fill( ct, L_s2_trx[lt] );
//            h_Rs2x_ct ->Fill( ct, R_s2_trx[rt] );
//            h_a1sum_ct->Fill( ct, R_a1_asum_p );
//            h_a2sum_ct->Fill( ct, R_a2_asum_p );
//
//	    h_Rz->Fill(R_tr_vz[rt]);
//	    
//	    h_Rth->Fill(R_tr_tg_th[rt]);
//	    h_Rph->Fill(R_tr_tg_ph[rt]);
//	    h_Rp->Fill(R_p);
//	    h_Lz->Fill(L_tr_vz[lt]);
//	    h_Lth->Fill(L_tr_tg_th[lt]);	    	    
//	    h_Lph->Fill(L_tr_tg_ph[lt]);	    	    
//	    h_Lp->Fill(L_p);	    
//
//	     
//	    //======== w/o momentum correction ============//
//
// 	    double Ee_b = sqrt( Me*Me + B_p*B_p );
//	    double L_Eb = sqrt( Me*Me + L_p*L_p );
//	    double R_Eb = sqrt( MK*MK + R_p*R_p );
//	    
//	    //==== Right Hand Coordinate ========//
//
//	    double R_pz_b=R_p/sqrt(1.0*1.0 + pow(R_tr_tg_th[rt], 2.0) + pow( R_tr_tg_ph[rt],2.0));
//	    double R_px_b=R_pz_b * R_tr_tg_th[rt];
//	    double R_py_b=R_pz_b * R_tr_tg_ph[rt];
//	    double L_pz_b=L_p/sqrt(1.0*1.0 + pow(L_tr_tg_th[lt], 2.0) + pow( L_tr_tg_ph[lt],2.0));
//	    double L_px_b=L_pz_b * L_tr_tg_th[lt];
//	    double L_py_b=L_pz_b * L_tr_tg_ph[lt];
//
//            TVector3 L_vb, R_vb, B_vb; // Energy loss correction
//
//	    B_vb.SetXYZ(0.0,0.0,B_p);
//	    L_vb.SetXYZ(L_px_b, L_py_b, L_pz_b);
//	    R_vb.SetXYZ(R_px_b, R_py_b, R_pz_b);
//	    R_vb.RotateX(  13.2/180.*PI );
//	    L_vb.RotateX( -13.2/180.*PI );
//
//
//
//
//	    
//	    
//	    double mass_b, mm_b, mm_Lb;
//            mass_b = sqrt( (Ee_b + mt - L_Eb - R_Eb)*(Ee_b + mt - L_Eb - R_Eb)
//			 - (B_vb - L_vb - R_vb)*(B_vb - L_vb - R_vb) );
//
//	    mm_b=mass_b - mh;
//	    mm_b=mm_b*1000.; // GeV -> MeV
//
//
//	    //============================//
//	    //=====  calibration =========//
//	    //===========================//
//
//
//
//	    Calib(rt, lt);
//
//	    //	    tr.ct_c=CoinCalc_c(R_s2pad,L_s2pad,rt,lt);
//
//	    h_Rz_c->Fill(R_tr_vz[rt]);
//	    h_Rth_c->Fill(R_tr_tg_th[rt]);
//	    h_Rph_c->Fill(R_tr_tg_ph[rt]);
//	    h_Rp_c->Fill(R_p);
//	    h_Lz_c->Fill(L_tr_vz[lt]);
//	    h_Lth_c->Fill(L_tr_tg_th[lt]);	    	    
//	    h_Lph_c->Fill(L_tr_tg_ph[lt]);	    	    
//	    h_Lp_c->Fill(L_p);
//	    tr.Lp_c[lt] = L_p;
//	    tr.Rp_c[rt] = R_p;
//	    tr.Bp_c     = B_p;
//	    
//
//
//
//	    //======= W/ Matrix calibraiton ==========================//
//
//            double Ee;
//
//	    Ee =sqrt(B_p*B_p + Me*Me);
//	    R_E =sqrt(R_p*R_p + MK*MK);
//	    L_E =sqrt(L_p*L_p + Me*Me);
//
//
//	    //===== Right Hand Coordinate ====//
//	    
//
//	    double R_pz = R_p/sqrt(1.0*1.0 + pow(tan(R_tr_tg_th[rt]), 2.0) + pow(tan( R_tr_tg_ph[rt]),2.0) );
//	    double R_px = R_pz * tan (R_tr_tg_th[rt] );
//	    double R_py = R_pz * tan( R_tr_tg_ph[rt] );
//
//	    double L_pz = L_p/sqrt(1.0*1.0 + pow(tan( L_tr_tg_th[lt] ), 2.0) + pow(tan( L_tr_tg_ph[lt]),2.0));
//	    double L_px = L_pz * tan( L_tr_tg_th[lt] );
//	    double L_py = L_pz * tan( L_tr_tg_ph[lt] );
//
//
//
//
//            TVector3 L_v, R_v, B_v;
//	    B_v.SetXYZ(0.0,0.0,B_p);
//	    L_v.SetXYZ(L_px, L_py, L_pz);
//	    R_v.SetXYZ(R_px, R_py, R_pz);	    
//	    R_v.RotateX(  13.2/180.*PI );
//	    L_v.RotateX( -13.2/180.*PI );
//
//	    //======= W/ Matrix & Energy Loss calibraiton ============//
//
//            TVector3 L_vc, R_vc, B_vc;
//	    B_vc.SetXYZ(0.0,0.0,B_p);
//	    L_vc.SetXYZ(L_px, L_py, L_pz);
//	    R_vc.SetXYZ(R_px, R_py, R_pz);
//	    R_vc.RotateX(  13.2/180.*PI );
//	    L_vc.RotateX( -13.2/180.*PI );
//	    double Eec =sqrt(B_p*B_p + Me*Me);
//	    double R_Ec =sqrt(R_p*R_p + MK*MK);
//	    double L_Ec =sqrt(L_p*L_p + Me*Me);
//
//
//	   	    
//            double mass,mass_c, mm,mm_c,mass_L,mass_nnL,mm_L,mm_nnL,mm_Al,mass_Al,mass2,mm2,mass_MgL;
//	    double mass_pc, mass_H3L,mm_H3L,mm_MgL;
//
//	    
//            mass = sqrt( (Ee + mt - L_E - R_E)*(Ee + mt - L_E - R_E)
//                              - (B_v - L_v - R_v)*(B_v - L_v - R_v) );
//
//   
//            mass2= sqrt( (Ee + mt - L_E - R_Epi)*(Ee + mt - L_E - R_Epi)
//                              - (B_v - L_v - R_v)*(B_v - L_v - R_v) );
//
//	    
//            mass_pc = sqrt( (Eec + mt - L_Ec - R_Ec)*(Eec + mt - L_Ec - R_Ec)
//                              - (B_vc - L_vc - R_vc)*(B_vc - L_vc - R_vc) );
//
//
//	    
//	    mm=mass - mh;
//            mm2=mass2 - mh;
//
//	    mm = mm*1000.; // GeV -> MeV
//	    mm2 = mm2*100.; // GeV ->MeV 
//
//	    //=== w/ matrix tuning ======//
//	    
//	    // Lambda Mass //
//           mass_L = sqrt( (Ee + Mp - L_E - R_E)*(Ee + Mp - L_E - R_E)
//                              - (B_v - L_v - R_v)*(B_v - L_v - R_v) );
//	   mm_L=mass_L - ML;
//	   mm_L = mm_L*1000.;
//	    // nnL Mass //
//           mass_nnL = sqrt( (Ee + MT - L_E - R_E)*(Ee + MT - L_E - R_E)
//                              - (B_v - L_v - R_v)*(B_v - L_v - R_v) );
//	   mm_nnL=mass_nnL - MnnL;
//	   mm_nnL = mm_nnL*1000.;
//	    // H3L Mass //
//           mass_H3L = sqrt( (Ee + MHe3 - L_E - R_E)*(Ee + MHe3 - L_E - R_E)
//                              - (B_v - L_v - R_v)*(B_v - L_v - R_v) );
//	   mm_H3L=mass_H3L - MH3L;	   
//	   mm_H3L = mm_H3L*1000.;
//	   
//	    // Alminium Mass //
//           mass_Al = sqrt( (Ee + MAl - L_E - R_E)*(Ee + MAl - L_E - R_E)
//                              - (B_v - L_v - R_v)*(B_v - L_v - R_v) );
//	   mm_Al=mass_Al - MAl;
//	   mm_Al = mm_Al*1000.;
//	   
//	   // Mg27L Mass //
//           mass_MgL = sqrt( (Ee + MAl - L_E - R_E)*(Ee + MAl - L_E - R_E)
//                              - (B_v - L_v - R_v)*(B_v - L_v - R_v) );
//	   mm_MgL=mass_MgL - MMgL;	   
//	   mm_MgL = mm_MgL*1000.;
//	   
//	    
//	    if( Kaon && (fabs(ct-30.)<10. || fabs(ct+30.)<10.) ){
//              h_mmallbg->Fill( mm );
//              if( fabs( L_tr_vz[lt] + 0.125 ) < 0.015 || fabs( L_tr_vz[lt] - 0.125 ) < 0.015 ){ 
//                h_mmfoilbg->Fill( mm );
//              }
//	      //              if( fabs( L_tr_vz[lt] ) < 0.1 ){
//	      if(zcut ){ 
//                h_mmbg->Fill( mm );
//              }
//	    }
//
//
//
//
//	    if( Kaon && fabs(ct)<1.0){
//	      
//              h_mmall ->Fill( mm );
//              if( fabs( L_tr_vz[lt] + 0.125 ) < 0.015 || fabs( L_tr_vz[lt] - 0.125 ) < 0.015 ){ 
//		tr.missing_mass_Al=mm_Al;
//		tr.missing_mass_MgL=mm_MgL;
//		
//		h_mmfoil->Fill( mm );
//		
//              }
//              if( fabs( L_tr_vz[lt]  ) < 0.1 ){ 
//                h_Lp_mm   ->Fill( mm, L_tr_p[lt] );
//                h_Ll_mm   ->Fill( mm, L_tr_pathl[lt] );
//                h_Ltgy_mm ->Fill( mm, L_tr_tg_y[lt] );
//                h_Ltgth_mm->Fill( mm, L_tr_tg_th[lt] );
//                h_Ltgph_mm->Fill( mm, L_tr_tg_ph[lt] );
//                h_Lvx_mm  ->Fill( mm, L_tr_vx[lt] );
//                h_Lvy_mm  ->Fill( mm, L_tr_vy[lt] );
//                h_Lvz_mm  ->Fill( mm, L_tr_vz[lt] );
//                h_Lx_mm   ->Fill( mm, L_tr_x[lt] );
//                h_Ly_mm   ->Fill( mm, L_tr_y[lt] );
//                h_Lth_mm  ->Fill( mm, L_tr_th[lt] );
//                h_Lph_mm  ->Fill( mm, L_tr_ph[lt] );
//              }
//              if( fabs( R_tr_vz[rt] ) < 0.1 ){ 
//                h_Rp_mm   ->Fill( mm, R_tr_p[rt] );
//                h_Rl_mm   ->Fill( mm, R_tr_pathl[rt] );
//                h_Rtgy_mm ->Fill( mm, R_tr_tg_y[rt] );
//                h_Rtgth_mm->Fill( mm, R_tr_tg_th[rt] );
//                h_Rtgph_mm->Fill( mm, R_tr_tg_ph[rt] );
//                h_Rvx_mm  ->Fill( mm, R_tr_vx[rt] );
//                h_Rvy_mm  ->Fill( mm, R_tr_vy[rt] );
//                h_Rvz_mm  ->Fill( mm, R_tr_vz[rt] );
//                h_Rx_mm   ->Fill( mm, R_tr_x[rt] );
//                h_Ry_mm   ->Fill( mm, R_tr_y[rt] );
//                h_Rth_mm  ->Fill( mm, R_tr_th[rt] );
//                h_Rph_mm  ->Fill( mm, R_tr_ph[rt] );
//                h_Rp_Lp   ->Fill( L_tr_p[lt], R_tr_p[rt] );
//                h_ct_Rp->Fill(R_tr_p[rt],ct);
//              }
//
//	      //	      if(fabs(R_tr_vz[rt]-0.125)<0.01 || fabs(R_tr_vz[rt] +0.125 )<0.01){
//	      if(fabs(R_tr_vz[rt]-L_tr_vz[lt])<0.025 && (fabs(R_tr_vz[rt] + L_tr_vz[lt])/2.0 >0.125 ) ){
//		tr.missing_mass_Al_bg=mm;
//		h_mm_Al_bg->Fill(mm);
//		h_Rz_cut->Fill(R_tr_vz[rt]);
//	      }
//
//	      	      
//	      //              if( fabs( L_tr_vz[lt] ) < 0.1 && fabs( R_tr_vz[rt] ) < 0.1 ){
//	      if(zcut){
//
//		//                h_mm      ->Fill( mm );
//
//	       tr.missing_mass_cut = mm;
//	       tr.missing_mass_L = mm_L;
//	       tr.missing_mass_nnL = mm_nnL;
//	       tr.missing_mass_H3L = mm_H3L;
//	       tr.missing_mass_b=mm_b;
//
//
//	       
//                h_mm_L    ->Fill( mm_L );
//                h_mm_L_ec    ->Fill( mass_pc);		
//                h_mm_nnL  ->Fill( mm_nnL );
//		h_mm_H3L  ->Fill( mm_H3L );
//                h_ct_wK_z->Fill( ct );                
//        
//	      }
//	    
//		    
//
//
//	    
//	    } // if Kaon
//
//				    
//
//              if(Kaon && fabs(ct)<1.0 && ((-0.15<(L_tr_vz[lt]) && (L_tr_vz[lt])<-0.1) || ( 0.1<(L_tr_vz[lt]) && (L_tr_vz[lt])<0.15) &&  fabs(R_tr_vz[rt]-L_tr_vz[lt])<0.025) 
//		 && ((-0.15<(R_tr_vz[rt]) && (R_tr_vz[rt])<-0.1) ||( 0.1<(R_tr_vz[rt]) && (R_tr_vz[rt])<0.15)))h_mm_MgL->Fill(mm_MgL);//h_mm_Al->Fill(mm_Al);
//
//	      if(Kaon && ((-35<ct && ct<-15.0) || (15.0<ct && ct<35)) 
//                 && ((-0.15<(L_tr_vz[lt]) && (L_tr_vz[lt])<-0.1) || ( 0.1<(L_tr_vz[lt]) && (L_tr_vz[lt])<0.15) && fabs(R_tr_vz[rt]-L_tr_vz[lt])<0.025) 
//		 && ((-0.15<(R_tr_vz[rt]-0.01) && (R_tr_vz[rt])<-0.1) ||( 0.1<(R_tr_vz[rt]) && (R_tr_vz[rt])<0.15))){
//		tr.missing_mass_MgL_acc=mm_MgL;
//		
//		h_mm_MgL_acc->Fill(mm_MgL);
//	      }
//
//	      
//	      if( Kaon && ((-35<ct && ct<-15.0) || (15.0<ct && ct<35)) && zcut){
//		 //		 fabs( L_tr_vz[lt] ) < 0.1 && fabs( R_tr_vz[rt] ) < 0.1 &&fabs( L_tr_vz[lt] ) < 0.1){
//                h_acc_nnL     ->Fill(mm_nnL);
//		h_acc_H3L     ->Fill(mm_H3L);
//                h_acc_L       ->Fill(mm_L);
//                h_ct_wK_z_acc ->Fill( ct );
//	     }
//
//	 
//              double ctime=-1000.;
//	     //--------------------------------------------------------------------------------//
//              if( Kaon && zcut){
//		  //		  fabs( L_tr_vz[lt] ) < 0.1 && fabs( R_tr_vz[rt] ) < 0.1 &&fabs( L_tr_vz[lt] ) < 0.1){
//               h_ct_wK_z_all->Fill(ct);
//            
//
//              if((-35<ct && ct <-15) || (15<ct && ct<53)){
//	     
//	       ctime=ct;
//	       
//              while(1){
//	       if(-1.0<ctime && ctime<1.0){
//		 h_ct_acc->Fill(ctime);
//                 h_ct_acc->Fill(ctime-36);
//		 break;}
//	       else if(ctime<-1.0){ctime=ctime+2;}
//	       else if(1.0<ctime){ctime=ctime-2;}
//	      }
//	      }
//	      }
//	
//	
//             tr.missing_mass = mm          ; tr.coin_time =ct         ;
//	     tr.momR         = R_tr_p[0]  ; tr.momL      =L_tr_p[0] ;
//	     tr.zR           = R_tr_vz[0] ; tr.zL        =L_tr_vz[0];
//	     //	     tr.AC1_sum      = R_a1_asum_p/400. ; tr.AC2_sum   =R_a2_asum_p/400.;
//	     tr.AC1_sum      = R_a1_asum_p ; tr.AC2_sum   =R_a2_asum_p;
//	     tr.ct_acc=ctime;
//	     //	     tree_out->Fill();
//	  
//    	      //--------------------------------------------------------------------------------------//
//
//
//	     //	     if( fabs( L_tr_vz[lt]  ) < 0.1 && fabs( R_tr_vz[rt]  ) < 0.1 &&fabs(ct)<1.0)
//	     if( zcut && fabs(ct)<1.0)
//	       h_mm->Fill( mm ); //No Kaon Cut
//	     //	     if( fabs( L_tr_vz[lt]  ) < 0.1 && fabs( R_tr_vz[rt]  ) < 0.1 && 2.0<ct && ct<4.0)
//	     if( zcut && 2.0<ct && ct<4.0)
//	       h_mm_pi->Fill( mm ); //No Kaon Cut
//	     //	     if( fabs( L_tr_vz[lt]  ) < 0.1 && fabs( R_tr_vz[rt]  ) < 0.1
//	     if(  zcut && ((-35<ct && ct<-15.0) || (15.0<ct && ct<35))){
//	       h_mm_acc->Fill( mm ); //No Kaon Cut
//	       tr.missing_mass_acc=mm;
//	     }
//          } // if L_Tr && L_FP && R_Tr && R_FP
//	  tree_out->Fill();
//
//
//
//	  
//        } // for NRtr
//      } // for NLtr
//    } // if LHRS && RHRS
//    if(n%100000==0){
//      end = time(NULL);
//      time(&end);
//      double diff = difftime(end,start);
//      double esttime = diff * ENum / (n+1) - diff;
//      cout<<n<<" / "<<ENum<<" : "<<Form("%.0lf sec passed,  %.0lf sec left",diff,esttime)<<endl;
//    }
// 
//    //   if(n % 100000 == 0){ cout<<n<<" / "<<ENum<<endl; }
//  } // for ENum
//      int NRtr = (int)R_tr_n;  if(NRtr>MAX) NRtr = MAX;
//      h_R_trig->Fill( R_evtype);
//      tr.ntrack_r=NRtr;
//#ifdef F1TDC
//      convertF1TDCR(param);
//      R_s0_t = RS0_F1time[0];
//      for(int i=0;i<16;i++){
//        if(RS2_F1time[i]>-9999.)R_s2_t[i] =  RS2_F1time[i];
//        else R_s2_t[i] = -99.;
//      }
//#endif
//
//
//      h_R_tr_n->Fill( R_tr_n );
//      for(int t=0;t<NRtr;t++){
//        R_Tr = R_FP = false;
//        // Cuts
//        if( R_tr_chi2[t]<0.01 ) R_Tr = true;
//        if( R_tr_th[t]<0.17*R_tr_x[t]+0.025
//         && R_tr_th[t]>0.17*R_tr_x[t]-0.035
//         && R_tr_th[t]<0.4 *R_tr_x[t]+0.13 ) R_FP = true;
//	
//        int s2pad = (int)R_s2_trpad[t];
//	if(s2pad<0)break;
//        tr.Rs2_pad[t] =(int)R_s2_trpad[t];
//	    double p    = R_tr_p[t];
//        double path = R_s2_trpath[t] - R_s0_trpath[t];
//        double beta = 0, m2 = 0;
//
//	    double B_E     = sqrt( Me*Me + B_p*B_p );
//            int L_s2pad = (int)L_s2_trpad[lt];
//            double L_E     = sqrt( Me*Me + L_p*L_p );
//            double L_betae = L_p / sqrt(Me*Me + L_p*L_p);
//            int R_s2pad    = (int)R_s2_trpad[rt];
//            double R_E     = sqrt( MK*MK + R_p*R_p );
//	    double R_Epi   = sqrt( Mpi*Mpi + R_p*R_p );
//            double R_betaK = R_p / sqrt(MK*MK + R_p*R_p);
//	    double R_betaPi =R_p/ sqrt(Mpi*Mpi + R_p*R_p);
//
//
//	    CoinCalc(R_s2pad,L_s2pad,rt,lt);
////////////////////////////konositaha
//////////////////////////////////////////////////////motomotodayo
//	 Rs2_off=s2f1_off(Rs2pads,"R",mode,kine);
//	 Ls2_off=s2f1_off(Ls2pads,"L",mode,kine);
//	 tof_r=(((-RF1[48+Rs2pads]+RF1[46]-RF1[16+Rs2pads]+RF1[9]+Rs2_off)/2.0))*tdc_time;
//	 tof_l=((-LF1[Ls2pads]+LF1[30]-LF1[Ls2pads+48]+LF1[37]+Ls2_off)/2.0)*tdc_time;
//	  coin_t=tof_r-tof_l-coin_offset-s2_offset; //coin time
//	  coin_tc=tof_r-tof_l+rpath_corr-lpath_corr-pathl_off-coin_offset; //  coin Path & Offset  correction 
// 

////////////////////////////////////
///////CUT CONDITION////////////////
////////////////////////////////////

   cut_rpathl=false;
   cut_lpathl=false;
   cut_Rs2=false;
   cut_Ls2=false;
   cut_vz=false;
   cut_track=false;
   cut_s0=false;
   coin_trig=false;

     Rz=Rvz[0];
     Lz=Lvz[0];
   // if(Rvz_cutmin<Rvz[0] && Rvz[0]<Rvz_cutmax && Lvz_cutmin<Lvz[0] && Lvz[0]<Lvz_cutmax)cut_vz=true;
   if(Rvz_cutmin<Rz && Rz<Rvz_cutmax && Lvz_cutmin<Lz && Lz<Lvz_cutmax)cut_vz=true;
//////////////////////////////////////////////////////////////////////////////////Z-CUT

  if(Rs2trpad[0]==Rs2pads && Ls2trpad[0]==Ls2pads)cut_track=true;
  if(rpathl_cutmin<rpathl && rpathl<rpathl_cutmax)cut_rpathl=true;
  if(lpathl_cutmin<lpathl && lpathl<lpathl_cutmax)cut_lpathl=true;
  if(-RF1[43]+RF1[46]>0 && -RF1[44]+RF1[46]>0 && -LF1[27]+LF1[30]>0 && -LF1[28]+LF1[30]>0)cut_s0=true;
  if(RF1[48+Rs2pads]>0 && RF1[16+Rs2pads]>0)cut_Rs2=true;
  if(LF1[Ls2pads]>0 && LF1[Ls2pads+48]>0)cut_Ls2=true;
  if(cut_Rs2 && cut_Ls2 && cut_s0)coin_trig=true;  
//cut_track=true;
//cut_rpathl=true;
//cut_lpathl=true;
//coin_trig=true;
//////////////////////////////////////////////////////////////////////////////////OTHER-CUTS

////////////////////////////////////
//////FILL INTO HISTOGRAMS//////////
////////////////////////////////////

////COINCIDENCE TIME////////////////
	if(coin_trig && cut_vz && cut_lpathl && cut_rpathl && cut_track){
	 hcoin_tc->Fill(coin_tc);
	}
////MISSING MASS w/o cut////////////
	if(coin_tc<1.0 && -1.0<coin_tc) hmm->Fill(mm);

 //--------- with AC1 Cut ---------------// 
  for(int j=0;j<nth;j++){
      cut_ac1=false;
      cut_ac2=false;
   if(Ra1sum<ac1_adc[j])cut_ac1=true;

   if(ac2_min && cut_ac1){
    hcoin_t2[j]->Fill(coin_tc); //AC1 cut   
  }
   //--------- Kaon Cut Hist ---------------//
 if(coin_trig && cut_vz && cut_lpathl && cut_rpathl && cut_track && cut_ac1)hcoin_k_ac1[j]->Fill(coin_tc);
   
  //-------with AC2 Cut --------------------//
   if(ac2_adc[j]<Ra2sum && Ra2sum < 4000)cut_ac2=true;
 if(coin_trig && cut_vz && cut_lpathl && cut_rpathl && cut_track && cut_ac1 && cut_ac2)hcoin_k_ac2[j]->Fill(coin_tc);
  //-------with AC2 Cut --------------------//
//   for(int i=0;i<nth;i++){
//     cut_ac2=false;
//     //    if(ac2_min && Ra2sum>ac2_adc[i] && Ra2sum<th_ac2_t)cut_ac2=true;
//     //    if(ac2_min==0 && Ra2sum>th_ac2_b && Ra2sum<ac2_adc[i])cut_ac2=true;
//
//     
//     //      if(ac2_min && Ra2sum>ac2_adc[i] && Ra2sum<th_ac2_t)cut_ac2=true;
//     //      if(ac2_min==0 && Ra2sum>th_ac2_b && Ra2sum<ac2_adc[i])cut_ac2=true;
//
//     //-------- Coin time study -----------//
//     if(ac2_min &&Ra2sum>ac2_adc[i] &&Ra2sum< ac2_kcut_max)cut_ac2=true;
//     //   if(ac2_min==0 && Ra2sum<ac2_adc[i] &&Ra2sum>th2_min)cut_ac2=true;
//     // if(10.0>Ra2sum && Ra2sum>3.0)cut_ac2=true;
//    if(cut_ac2 && Ra1sum<th1_max){
//    hcoin_t1[i]->Fill(coin_tc); // AC2 cut
//    hcoin_ac1[i]->Fill(coin_tc,Ra1sum);//AC2 cut && (AC1 variable cut)  B
//    hcoin_ac1_max[i]->Fill(coin_tc,Ra1sum);//AC2 cut && (AC1 variable cut)  
//    if(coin_tc<1.0 && -1.0<coin_tc)hmm_ac1[i]->Fill(mm,Ra1sum);
//
//
//
//    }
//   }
   } //i < nth

   //--------- Kaon Cut Hist ---------------//
 if(coin_trig && cut_vz && cut_lpathl && cut_rpathl && cut_track && Ra1sum<ac1_kcut 
    && ac2_kcut_min<Ra2sum && Ra2sum<ac2_kcut_max)hcoin_k->Fill(coin_tc);
   //--------- Pion Cut Hist ---------------//
 if(coin_trig && cut_vz && cut_lpathl && cut_rpathl && cut_track && Ra1sum>ac1_kcut 
    && Ra2sum>ac2_kcut_max){
   hcoin_pi->Fill(coin_tc);
//   if(NRu1_time==5)hRu1_time_c->Fill(Ru1_time[2]);
   
 }
//  if(cut_Rs2 && cut_vz && cut_lpathl && cut_rpathl && cut_track && Ra1sum>ac1_kcut 
//    && Ra2sum>ac2_kcut_max && NRu1_time==5)hRu1_time_s->Fill(Ru1_time[2]);

  //-------- Proton Cut Hist --------------//
 if(coin_trig && cut_vz && cut_lpathl && cut_rpathl && cut_track && Ra1sum<ac1_kcut 
    && Ra2sum<ac2_kcut_min)hcoin_p->Fill(coin_tc);


}


}
////////////////////////////////////////////////////////////


void tuningAC::Fitting(){
 def_sig_p=0.852; def_mean_p=0.0;
 def_sig_pi=0.443; def_mean_pi=11;
 def_sig_k=0.644; def_mean_k=8.;
 def_acc=27.7;

 fpi_pic->SetParameter(1,def_mean_pi);
 fpi_pic->SetParLimits(1,def_mean_pi-0.5*def_sig_pi,def_mean_pi+0.5*def_sig_pi);
 fpi_pic->SetParameter(2,def_sig_pi);
 fpi_pic->SetParLimits(2,0.8*def_sig_pi,1.2*def_sig_pi);
 fpi_pic->SetParameter(3,def_acc);

 fp_pc->SetParameter(1,def_mean_p);
 fp_pc->SetParLimits(1,def_mean_p-0.5*def_sig_p,def_mean_p+0.5*def_sig_p);
 fp_pc->SetParameter(2,def_sig_p);
 fp_pc->SetParLimits(2,0.8*def_sig_p,1.2*def_sig_p);
 fp_pc->SetParameter(3,def_acc);

 hcoin_k->Fit("facc_kc","Rq","",min_coin_c,min_coin_c+3.0);
 def_acc_k=facc_kc->GetParameter(0);

 fk_kc->SetParameter(1,def_mean_k);
 fk_kc->SetParLimits(1,def_mean_k-0.5*def_sig_k,def_mean_k+0.5*def_sig_k);
 fk_kc->SetParameter(2,def_sig_k);
 fk_kc->SetParLimits(2,0.8*def_sig_k,1.2*def_sig_k);
 fk_kc->FixParameter(3,def_acc_k);

 hcoin_k->Fit("fk_kc","Rq","",def_mean_k-3*def_sig_k,def_mean_k+3*def_sig_k);
 hcoin_pi->Fit("fpi_pic","Rq","",def_mean_pi-3*def_sig_pi,def_mean_pi+3*def_sig_pi);
 hcoin_p->Fit("fp_pc","Rq","",def_mean_p-3*def_sig_p,def_mean_p+3*def_sig_p);

 def_num_k=fk_kc->GetParameter(0);
 def_mean_k=fk_kc->GetParameter(1);
 def_sig_k=fk_kc->GetParameter(2);

 def_num_p=fp_pc->GetParameter(0);
 def_mean_p=fp_pc->GetParameter(1);
 def_sig_p=fp_pc->GetParameter(2);

 def_num_pi=fpi_pic->GetParameter(0);
 def_mean_pi=fpi_pic->GetParameter(1);
 def_sig_pi=fpi_pic->GetParameter(2);
 
for(int i=0;i<nth;i++){
 noise[i]=signal[i]=0.;
 hcoin_k_ac2[i]->Fit(Form("fac[%d]",i),"Rq","",min_coin_c,min_coin_c+3.0);
 noise[i]=fac[i]->GetParameter(0);

 fkk[i]->SetParameter(1,def_mean_k);
 fkk[i]->SetParLimits(1,def_mean_k-0.5*def_sig_k,def_mean_k+0.5*def_sig_k);
 fkk[i]->SetParameter(2,def_sig_k);
 fkk[i]->SetParLimits(2,0.8*def_sig_k,1.2*def_sig_k);
 fkk[i]->FixParameter(3,noise[i]);

 hcoin_k_ac2[i]->Fit(Form("fkk[%d]",i),"Rq","",def_mean_k-3*def_sig_k,def_mean_k+3*def_sig_k);

 signal[i]=fkk[i]->GetParameter(0);
cout << "Cut[" << i << "] " << "S = " << signal[i] << "/ N = " << noise[i] << "... S*S/N = " << signal[i]*signal[i]/noise[i] << endl;
}
}
////////////////////////////////////////////////////////////

void tuningAC::Draw(){

//Test
c1 = new TCanvas("c1","c1",800.,800.);
c1->Divide(3,2);
cout << "start hcoin_tc" << endl;
//c1->cd(1);hcoin_tc->Draw("");
c1->cd(1);hcoin_pi->Draw("");fpi_pic->SetLineColor(kRed);fpi_pic->Draw("same");
c1->cd(2);hcoin_k->Draw("");fk_kc->SetLineColor(kRed);fk_kc->Draw("same");
c1->cd(3);hcoin_p->Draw("");fp_pc->SetLineColor(kRed);fp_pc->Draw("same");
for(int i=1;i<=3;i++){
c1->cd(i+3);hcoin_k_ac2[i-1]->Draw("");fkk[i-1]->SetLineColor(kRed);fkk[i-1]->Draw("same");
}

}
////////////////////////////////////////////////////////////




void tuningAC::Print(string ofname){



  cout<<"Print is starting"<<endl;
  cout<<"pdf name: "<<ofname<<endl;
 c1->Print(Form("%s[",ofname.c_str()));
 c1->Print(Form("%s",ofname.c_str()));
 c1->Print(Form("%s]",ofname.c_str()));
// c11->Print(Form("%s[",ofname.c_str()));
// c11->Print(Form("%s",ofname.c_str()));
// c14->Print(Form("%s",ofname.c_str()));
// c15->Print(Form("%s",ofname.c_str()));
// c16->Print(Form("%s",ofname.c_str()));
// c17->Print(Form("%s",ofname.c_str()));
// c18->Print(Form("%s",ofname.c_str())); 
//      cout<<"c18 is done"<<endl;       
// c21->Print(Form("%s",ofname.c_str()));  
// c22->Print(Form("%s",ofname.c_str())); 
// c23->Print(Form("%s",ofname.c_str()));
// c24->Print(Form("%s",ofname.c_str()));
// c25->Print(Form("%s",ofname.c_str())); 
// c30->Print(Form("%s",ofname.c_str()));
// c30->Print(Form("%s]",ofname.c_str()));
//// c32->Print(Form("%s",ofname.c_str()));
//// c32->Print(Form("%s]",ofname.c_str()));
 
    
 cout<<"Print is done "<<endl;
   


}


///////////////////////////////////////////////////////////////

void tuningAC::Write(){


// gL_ac1[fom_max_th2]->SetName(Form("gL_ac1_%d",fom_max_th2));
// gL_ac1[fom_max_th2]->Write();
// gS_ac1[fom_max_th2]->SetName(Form("gS_ac1_%d",fom_max_th2)); 
// gS_ac1[fom_max_th2]->Write();
// gL_FOM_ac1[fom_max_th2]->SetName(Form("gL_FOM_ac1_%d",fom_max_th2));
// gL_FOM_ac1[fom_max_th2]->Write();
// 
// gL_ac2[fom_max_th1]->SetName(Form("gL_ac2_%d",fom_max_th1));  
// gL_ac2[fom_max_th1]->Write();
// gS_ac2[fom_max_th1]->SetName(Form("gS_ac2_%d",fom_max_th1)); 
// gS_ac2[fom_max_th1]->Write();  
// gL_FOM_ac2[fom_max_th1]->SetName(Form("gL_FOM_ac2_%d",fom_max_th1));
// gL_FOM_ac2[fom_max_th1]->Write();  
//
 for(int i=0;i<3;i++){
// gSN_k_ac1[i][i]->SetFillColor(i+1);
// gSN_k_ac1[i][i]->SetMarkerColor(i+1);
// gSN_k_ac1[i][i]->SetFillStyle(3005);
// gSN_k_ac2[i][i]->SetFillColor(i+1);
// gSN_k_ac2[i][i]->SetMarkerColor(i+1);
// gSN_k_ac2[i][i]->SetFillStyle(3005);
// // TGraphErrors* gsum_k_ac1[100][100];
// gsum_k_ac1[i][i]->SetFillColor(i+1);
// gsum_k_ac1[i][i]->SetMarkerColor(i+1);
// gsum_k_ac1[i][i]->SetFillStyle(3005);
// gsum_k_ac2[i][i]->SetFillColor(i+1);
// gsum_k_ac2[i][i]->SetMarkerColor(i+1);
// gsum_k_ac2[i][i]->SetFillStyle(3005); 
// grate_k_ac1[i][i]->SetFillColor(i+1);
// grate_k_ac1[i][i]->SetMarkerColor(i+1);
// grate_k_ac1[i][i]->SetFillStyle(3005);
// grate_k_ac2[i][i]->SetFillColor(i+1);
// grate_k_ac2[i][i]->SetMarkerColor(i+1);
// grate_k_ac2[i][i]->SetFillStyle(3005);
//  //----- Pion -----------//
// grate_pi_ac1[i][i]->SetFillColor(i+1);
// grate_pi_ac1[i][i]->SetMarkerColor(i+1);
// grate_pi_ac1[i][i]->SetFillStyle(3005);
// grate_pi_ac2[i][i]->SetFillColor(i+1);
// grate_pi_ac2[i][i]->SetMarkerColor(i+1);
// grate_pi_ac2[i][i]->SetFillStyle(3005);  
//
//  //----- Proton -----------//
// grate_p_ac1[i][i]->SetFillColor(i+1);
// grate_p_ac1[i][i]->SetMarkerColor(i+1);
// grate_p_ac1[i][i]->SetFillStyle(3005);
// grate_p_ac2[i][i]->SetFillColor(i+1);
// grate_p_ac2[i][i]->SetMarkerColor(i+1);
// grate_p_ac2[i][i]->SetFillStyle(3005);  
// 
// 
// gSN_k_ac1[i][i]->SetName(Form("gSN_k_ac1_%d",i));
// gSN_k_ac1[i][i]->Write(); 
// gSN_k_ac2[i][i]->SetName(Form("gSN_k_ac2_%d",i)); 
// gSN_k_ac2[i][i]->Write(); 
// grate_k_ac1[i][i]->SetName(Form("grate_k_ac1_%d",i));
// grate_k_ac1[i][i]->Write(); 
// grate_k_ac2[i][i]->SetName(Form("grate_k_ac2_%d",i)); 
// grate_k_ac2[i][i]->Write();
// gsum_k_ac1[i][i]->SetName(Form("gsum_k_ac1_%d",i));
// gsum_k_ac1[i][i]->Write(); 
// gsum_k_ac2[i][i]->SetName(Form("gsum_k_ac2_%d",i)); 
// gsum_k_ac2[i][i]->Write();
//
// //---- proton ----//
// grate_p_ac1[i][i]->SetName(Form("grate_p_ac1_%d",i));
// grate_p_ac1[i][i]->Write(); 
// grate_p_ac2[i][i]->SetName(Form("grate_p_ac2_%d",i)); 
// grate_p_ac2[i][i]->Write(); 
//
// //---- pion ----//
// grate_pi_ac1[i][i]->SetName(Form("grate_pi_ac1_%d",i));
// grate_pi_ac1[i][i]->Write(); 
// grate_pi_ac2[i][i]->SetName(Form("grate_pi_ac2_%d",i)); 
// grate_pi_ac2[i][i]->Write(); 
// 
// 
// hcoin_t1[i]->Write();
 hcoin_t2[i]->Write();
// 
 }
//
//
// gSN_k_ac1[fom_max_th2][fom_max_th2]->SetName(Form("gSN_k_ac1_%d",fom_max_th2));
// gSN_k_ac1[fom_max_th2][fom_max_th2]->Write(); 
// gSN_k_ac2[fom_max_th1][fom_max_th1]->SetName(Form("gSN_k_ac2_%d",fom_max_th1)); 
// gSN_k_ac2[fom_max_th1][fom_max_th1]->Write(); 
// grate_k_ac1[fom_max_th2][fom_max_th2]->SetName(Form("grate_k_ac1_%d",fom_max_th2));
// grate_k_ac1[fom_max_th2][fom_max_th2]->Write(); 
// grate_k_ac2[fom_max_th1][fom_max_th1]->SetName(Form("grate_k_ac2_%d",fom_max_th1)); 
// grate_k_ac2[fom_max_th1][fom_max_th1]->Write(); 
// 
// facc_kc->Write();
// fk_kc->Write();
// fpi_pic->Write();
// fp_pc->Write();
// set->SetTH1(hmm_ac1_all_p[fom_th1][fom_max_th2],"hmm_ac1_all_p","Mass [GeV]","Counts/2 MeV");
// hmm_ac1_all_p[fom_th1][fom_max_th2]->Write();
// set->SetTH1(hmm_ac2_all_p[fom_th2][fom_max_th1],"hmm_ac2_all_p","Mass [GeV]","Counts/2 MeV"); 
// hmm_ac2_all_p[fom_th2][fom_max_th1]->Write();
// hmm->Write();
// hmm_acc->Write(); 
// hmm_p->Write();
// fL_all->Write();
// fL_p->Write();
// fS_all->Write();
// fS_p->Write(); 
// 
// hmm_fom->Write();
// hmm_fom_acc->Write();
// hmm_fom_p->Write();
// fL_fom->Write();
// fL_fom_p->Write();
// fS_fom->Write();
// fS_fom_p->Write(); 
//
// hmm_ac1_all_p[fom_th1][fom_max_th2]->Write();
// hmm_ac2_all_p[fom_th2][fom_max_th1]->Write();
//
// fLam[fom_th1][fom_max_th2][0]->Write();
// fSig[fom_th1][fom_max_th2][0]->Write();
// fLam_p->SetParameters(L0[fom_th1][fom_max_th2][0],L1[fom_th1][fom_max_th2][0],L2[fom_th1][fom_max_th2][0]);
// fSig_p->SetParameters(S0[fom_th1][fom_max_th2][0],S1[fom_th1][fom_max_th2][0],S2[fom_th1][fom_max_th2][0]);
// fLam_p->Write();
// fSig_p->Write(); 
// fk_fom->Write();
// 
// tnew->Write();
// hAC->Write();
// hAC2->Write(); 
 hcoin_tc->Write();
// hcoin_fom->Write();
// hRu1_time_s->Write(); 
// hRu1_time_c->Write();
//
// 
 fnew->Close();
}

double s2f1_off(int i,char* ARM,char* MODE, int KINE){


  double RS2_offset[16],LS2_offset[16];
  if(MODE=="H" && KINE==2){
 
 double  RS2_off_H2[16]={-16911.4,-16864.3,-16900,-16897,-16873.8,-16868.4,-16901.1,-16876.8,-16895.4,-16860.9,-16893.1,-16884.4,-16847.3,-16842.7,-16836.9,-16882.6};
 double  LS2_off_H2[16]={-25336.9,-25386.6,-25367.5,-25392.3,-25391.1,-25386.2,-25422,-25428.9,-25417.3,-25426.8,-25438.7,-25383.4,-25396,-25418.5,-25436.4,-26082.1};
 
  LS2_offset[i]=LS2_off_H2[i];
  RS2_offset[i]=RS2_off_H2[i];
  }


  if(MODE=="H" && KINE==1){
    
    //double  RS2_off_H1[16]={-16911.4,-16864.9,-16900,-16897.6,-16874.8,-16869.3,-16901.1,-16876.8,-16895.6,-16860.3,-16892.6,-16885,-16847.3,-16843.3,-16838.4,-16882.6};
    //double  LS2_off_H1[16]={-25336.9,-25385.7,-25367,-25392.2,-25391,-25386.3,-25422,-25428.9,-25415.2,-25425,-25438,-25381,-25394.4,-25417.5,-25432.8,-26082.1};

double  RS2_off_H1[16]={-16828.7,-16863,-16894,-16893.3,-16870.9,-16867.2,-16900.3,-16876.8,-16895.6,-16861.6,-16895,-16890.7,-16854.6,-16852.9,-16850.5,-16861.9};
double  LS2_off_H1[16]={-25335,-25385.6,-25367,-25392.1,-25391.7,-25386.4,-25422.1,-25428.9,-25414.9,-25424.7,-25436.9, -25381.2,-25390,-25413.4,-25428.7,-26640.8};
  LS2_offset[i]=LS2_off_H1[i];
  RS2_offset[i]=RS2_off_H1[i];
  }

 double s2f1_offset; 
 if(ARM=="R")s2f1_offset=RS2_offset[i];
 else  if(ARM=="L")s2f1_offset=LS2_offset[i];
 else {cout<<"false read out !!"<<endl;}

  return s2f1_offset;

}


#endif
